m4_dnl variable_type.m4
m4_dnl 
m4_dnl Part of amide - AMIDE's a Medical Image Data Examiner
m4_dnl Copyright (c) 2001-2014 Andy Loening
m4_dnl 
m4_dnl Author: Andy Loening <loening@alum.mit.edu>
m4_dnl
m4_dnl
m4_dnl This is an m4 file that specifies functions which are dependent
m4_dnl on the internal data type of the data set.
m4_dnl
m4_dnl Specifying this as an m4 file allows there to exist only
m4_dnl one version of the algorithms which can be optimized for
m4_dnl each of the internal data formats and scaling modes or roi types.
m4_dnl
m4_dnl to convert this into a c file, run this file through the
m4_dnl m4 process with "m4_SourceFile" defined in the form:
m4_dnl	*_*.c
m4_dnl where the first wildcard is the base file name (roi, volume, data_set)
m4_dnl and the second wildwcard specifies the data format (UBYTE, SBYTE, etc.),
m4_dnl data format and scaling mode (UBYTE_0D, etc.) or roi type, (ELLIPSOID,
m4_dnl BOX, etc.) as appropriate.
m4_dnl 
m4_dnl
m4_dnl m4 needs to be ran with the -P option
m4_dnl
m4_dnl
m4_dnl
m4_dnl
m4_dnl Warning message for the generated file
/* Do not edit this file, it is generated automatically from variable_type.m4 */
m4_dnl
m4_dnl
m4_dnl Figure out what internal data format/roi type we're making  
m4_ifdef(`m4_SourceFile', `
	m4_define(m4_File_Base_Name, `m4_substr(m4_SourceFile, 
		0, 
		m4_regexp(m4_SourceFile,`_[A-Z]'))')
	m4_define(m4_Temp_Variable_Type, `m4_substr(m4_SourceFile, 
		m4_eval(m4_regexp(m4_SourceFile,`_[A-Z]')+1), 
		m4_eval(m4_index(m4_SourceFile,`.')-m4_regexp(m4_SourceFile,`_[A-Z]')-1))')
	m4_define(m4_File_Type, `m4_substr(m4_SourceFile, 
		m4_eval(m4_index(m4_SourceFile, `.')+1),
		1)')
',`
``Must Define m4_SourceFile''
m4_m4exit')
m4_dnl
m4_dnl extract any additional information out of "Temp_Variable_Type"

m4_dnl m4_ifelse(m4_regexp(m4_Temp_Variable_Type, `_'), `-1',`
m4_dnl [^-]* matches everything but the ldash... using this as a poor man's wild card
m4_ifelse(m4_regexp(m4_Temp_Variable_Type, `_[^-]*_'), `-1',`
	m4_define(m4_Variable_Type, m4_Temp_Variable_Type)
	m4_define(m4_Scale_Dim, `')
	',`
	m4_ifelse(m4_regexp(m4_Temp_Variable_Type, `_INTERCEPT'), `-1',`
		m4_define(m4_Scale_Dim, `m4_substr(m4_Temp_Variable_Type,
			m4_eval(m4_regexp(m4_Temp_Variable_Type, `_')+1))')
		m4_define(m4_Intercept, `')
		',`
		m4_define(m4_Scale_Dim, `m4_substr(m4_Temp_Variable_Type,
			m4_eval(m4_regexp(m4_Temp_Variable_Type, `_')+1),
			m4_eval(m4_regexp(m4_Temp_Variable_Type, `_INTERCEPT')-
				m4_regexp(m4_Temp_Variable_Type, `_')-1))')
		m4_define(m4_Intercept, `INTERCEPT_')
		')
	m4_define(m4_Variable_Type, `m4_substr(m4_Temp_Variable_Type,
		0,
		m4_regexp(m4_Temp_Variable_Type, `_'))')
')
m4_dnl
m4_dnl
/* m4_SourceFile 
 *
 * generated from the following file:                 */
m4_dnl
m4_dnl
m4_dnl change the delimiter, so we don't lose pound signs in the files
m4_changecom(~,~)
m4_dnl
m4_ifelse(m4_File_Type, `h', 
	`m4_include(m4_format(`%s_%s', m4_File_Base_Name,`variable_type.h'))',
	`m4_include(m4_format(`%s_%s', m4_File_Base_Name,`variable_type.c'))')
m4_dnl
m4_dnl end of m4 file







